// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20230109152803_AddArticlesCommits")]
    partial class AddArticlesCommits
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseCommitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("PublishedCommitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BaseCommitId")
                        .IsUnique();

                    b.HasIndex("PublishedCommitId")
                        .IsUnique()
                        .HasFilter("[PublishedCommitId] IS NOT NULL");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Commit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ParentId");

                    b.ToTable("Commits", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "PowerUser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "RegularUser"
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nickname")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@email.com",
                            IsActive = true,
                            Nickname = "Super Admin",
                            PasswordHash = new byte[] { 240, 5, 194, 217, 114, 177, 103, 115, 197, 255, 34, 245, 73, 130, 252, 227, 29, 20, 18, 248, 186, 163, 156, 123, 247, 131, 69, 234, 248, 176, 131, 254, 67, 225, 143, 66, 111, 189, 179, 110, 206, 50, 253, 224, 223, 64, 212, 165, 207, 223, 33, 96, 122, 156, 35, 222, 11, 211, 57, 210, 15, 247, 50, 215 },
                            PasswordSalt = new byte[] { 167, 168, 248, 83, 195, 40, 72, 212, 38, 24, 167, 183, 114, 82, 10, 21, 77, 242, 160, 115, 21, 23, 133, 141, 225, 218, 173, 12, 34, 187, 183, 157, 189, 182, 203, 67, 194, 52, 232, 115, 30, 22, 147, 222, 240, 181, 30, 113, 84, 201, 78, 58, 228, 59, 105, 145, 136, 181, 197, 122, 4, 177, 97, 200, 132, 66, 68, 98, 106, 179, 38, 41, 240, 141, 195, 172, 241, 240, 24, 106, 220, 181, 180, 224, 252, 68, 37, 26, 41, 170, 122, 233, 142, 235, 201, 116, 216, 38, 60, 35, 221, 138, 11, 138, 244, 24, 61, 203, 225, 199, 221, 239, 5, 171, 239, 78, 246, 218, 59, 225, 197, 37, 235, 220, 235, 178, 98, 105 },
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Core.Entities.Article", b =>
                {
                    b.HasOne("Core.Entities.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Commit", "BaseCommit")
                        .WithOne("BaseArticle")
                        .HasForeignKey("Core.Entities.Article", "BaseCommitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Commit", "PublishedCommit")
                        .WithOne("PublishedArticle")
                        .HasForeignKey("Core.Entities.Article", "PublishedCommitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("BaseCommit");

                    b.Navigation("PublishedCommit");
                });

            modelBuilder.Entity("Core.Entities.Commit", b =>
                {
                    b.HasOne("Core.Entities.Article", "ParentArticle")
                        .WithMany("Commits")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Commit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("ParentArticle");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Article", b =>
                {
                    b.Navigation("Commits");
                });

            modelBuilder.Entity("Core.Entities.Commit", b =>
                {
                    b.Navigation("BaseArticle")
                        .IsRequired();

                    b.Navigation("Children");

                    b.Navigation("PublishedArticle")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
